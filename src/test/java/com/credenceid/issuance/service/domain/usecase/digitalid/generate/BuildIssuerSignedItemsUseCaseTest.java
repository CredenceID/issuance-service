package com.credenceid.issuance.service.domain.usecase.digitalid.generate;

import com.credenceid.identity.iso18013.DataIdentifier;
import com.credenceid.identity.iso18013.Util;
import com.credenceid.identity.iso18013.mdoc.IssuerSignedItem;
import com.credenceid.identity.iso5218.Sex;
import com.credenceid.issuance.service.domain.model.PersonalData;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class BuildIssuerSignedItemsUseCaseTest {
    private final BuildIssuerSignedItemsUseCase buildIssuerSignedItemsUseCase = new BuildIssuerSignedItemsUseCaseImpl();

    @Test
    public void tests_building_issuer_signed_items_list_with_valid_personal_data() {
        // Given
        PersonalData personalData = getPersonalData();

        List<byte[]> randoms = getRandoms();

        // When
        List<IssuerSignedItem> issuerSignedItems = buildIssuerSignedItemsUseCase.execute(personalData, randoms);

        // Then
        assertThat(issuerSignedItems.size()).isEqualTo(9);


        checkItem(issuerSignedItems.get(0), 0, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, DataIdentifier.FamilyName, "Mustermann");
        checkItem(issuerSignedItems.get(1), 1, new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, DataIdentifier.GivenNames, "Erika");
        checkItem(issuerSignedItems.get(2), 2, new byte[] { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 }, DataIdentifier.IssuingAuthority, "GAB");
        checkItem(issuerSignedItems.get(3), 3, new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 }, DataIdentifier.IssuingCountry, "GAB");
        checkItem(issuerSignedItems.get(4), 4, new byte[] { 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, DataIdentifier.DocumentNumber, "12345678");
        checkItem(issuerSignedItems.get(5), 5, new byte[] { 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05 }, DataIdentifier.BirthDate, LocalDate.parse("1980-01-01"));
        checkItem(issuerSignedItems.get(6), 6, new byte[] { 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06 }, DataIdentifier.Sex, Sex.FEMALE.getValue());
        checkItem(issuerSignedItems.get(7), 7, new byte[] { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 }, DataIdentifier.ExpiryDate, LocalDate.parse("2025-12-31"));
        checkItem(issuerSignedItems.get(8), 8, new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }, DataIdentifier.Portrait, new byte[] { 0x00, 0x01, 0x02, 0x03 });
    }

    private PersonalData getPersonalData() {
        return new PersonalData(
                new byte[] { 0x00, 0x01, 0x02, 0x03 },
                "ID",
                "GAB",
                "12345678",
                LocalDate.parse("1980-01-01"),
                Sex.FEMALE,
                LocalDate.parse("2025-12-31"),
                "Mustermann",
                "Erika"
        );
    }

    private List<byte[]> getRandoms() {
        return List.of(
                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                new byte[] { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 },
                new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 },
                new byte[] { 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },
                new byte[] { 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05 },
                new byte[] { 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06 },
                new byte[] { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 },
                new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }
        );
    }

    private void checkItem(IssuerSignedItem item, int expectedDigestId, byte[] expectedRandom, DataIdentifier expectedDataIdentifier, Object expectedValue) {
        assertThat(item.getDigestId()).isEqualTo(expectedDigestId);
        assertThat(item.getRandom()).isEqualTo(expectedRandom);
        assertThat(item.getElementIdentifier()).isEqualTo(expectedDataIdentifier.value);
        assertThat(item.getElementValue()).isEqualTo(expectedValue);
    }
}
